{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNw0f7i4fakWaFmeQMwtaMB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MarianaReyesT2019/2doParcial/blob/main/Tarea%20No.2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "Pj2hkszD3YB2"
      },
      "outputs": [],
      "source": [
        "options = [\"piedra\", \"tijeras\", \"papel\"]\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def search_winner(p1, p2):\n",
        "    if p1 == p2:\n",
        "        result = 0\n",
        "\n",
        "    elif p1 == \"piedra\" and p2 == \"tijeras\":\n",
        "        result = 1\n",
        "    elif p1 == \"piedra\" and p2 == \"papel\":\n",
        "        result = 2\n",
        "    elif p1 == \"tijeras\" and p2 == \"piedra\":\n",
        "        result = 2\n",
        "    elif p1 == \"tijeras\" and p2 == \"papel\":\n",
        "        result = 1\n",
        "    elif p1 == \"papel\" and p2 == \"piedra\":\n",
        "        result = 1\n",
        "    elif p1 == \"papel\" and p2 == \"tijeras\":\n",
        "        result = 2\n",
        "\n",
        "    return result"
      ],
      "metadata": {
        "id": "Uy0VfejR7T1H"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "search_winner(\"papel\", \"tijeras\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fBgcwYldCtY1",
        "outputId": "052d6488-a73e-4a43-dbca-1aceffe209bd"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test = [\n",
        "    [\"piedra\",\"piedra\", 0],\n",
        "    [\"piedra\", \"tijeras\", 1],\n",
        "    [\"piedra\", \"papel\", 2],\n",
        "]\n",
        "\n",
        "test = [\n",
        "    [\"piedra\", \"piedra\", 0],\n",
        "    [\"piedra\", \"tijeras\", 1],\n",
        "    [\"piedra\", \"papel\", 2]\n",
        "]\n",
        "\n",
        "for partida in test:\n",
        "    print(\"player1: %s player2: %s Winner: %s Validation: %s\" % (\n",
        "        partida[0], partida[1], search_winner(partida[0], partida[1]), partida[2]\n",
        "    ))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "be4KMLFKC5Y-",
        "outputId": "5b0f9c48-0df1-486f-e4cf-ef99956fd2ea"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "player1: piedra player2: piedra Winner: 0 Validation: 0\n",
            "player1: piedra player2: tijeras Winner: 1 Validation: 1\n",
            "player1: piedra player2: papel Winner: 2 Validation: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from random import choice\n",
        "def get_choice():\n",
        "    return choice(options)"
      ],
      "metadata": {
        "id": "IAZQ7FIJL8QP"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(10):\n",
        "    player1 = get_choice()\n",
        "    player2 = get_choice()\n",
        "    print(\"player1: %s player2: %s Winner: %s \" % (\n",
        "        player1, player2, search_winner(player1, player2)\n",
        "    ))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bDn9b2l8L_pI",
        "outputId": "bf5ef086-e085-4052-8c91-3f46d2515443"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "player1: papel player2: papel Winner: 0 \n",
            "player1: papel player2: piedra Winner: 1 \n",
            "player1: piedra player2: piedra Winner: 0 \n",
            "player1: tijeras player2: piedra Winner: 2 \n",
            "player1: piedra player2: tijeras Winner: 1 \n",
            "player1: tijeras player2: tijeras Winner: 0 \n",
            "player1: piedra player2: tijeras Winner: 1 \n",
            "player1: papel player2: piedra Winner: 1 \n",
            "player1: tijeras player2: piedra Winner: 2 \n",
            "player1: papel player2: piedra Winner: 1 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def str_to_list(option):\n",
        "    if option==\"piedra\":\n",
        "        res = [1,0,0]\n",
        "    elif option==\"tijeras\":\n",
        "        res = [0,1,0]\n",
        "    else:\n",
        "        res = [0,0,1]\n",
        "    return res\n",
        "\n",
        "data_X = list(map(str_to_list, [\"piedra\", \"tijeras\", \"papel\"]))\n",
        "data_y = list(map(str_to_list, [\"papel\", \"piedra\", \"tijeras\"]))\n",
        "\n",
        "print(data_X)\n",
        "print(data_y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T01Tj1dbMFfl",
        "outputId": "c12df0e9-9bd1-40c8-b762-d473fbc667f6"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1, 0, 0], [0, 1, 0], [0, 0, 1]]\n",
            "[[0, 0, 1], [1, 0, 0], [0, 1, 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neural_network import MLPClassifier"
      ],
      "metadata": {
        "id": "ZPu1cuskMIua"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf = MLPClassifier(verbose=False, warm_start=True)"
      ],
      "metadata": {
        "id": "DvwPsIAJMKYA"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = clf.fit([data_X[0]], [data_y[0]])\n",
        "print(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5NeDFtEkMRfC",
        "outputId": "b5e44f3f-c5a4-45ca-9b25-584c3dcb7da4"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MLPClassifier(warm_start=True)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:686: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (200) reached and the optimization hasn't converged yet.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def play_and_learn(iters=10, debug=False):\n",
        "    score = {\"win\": 0, \"loose\": 0}\n",
        "\n",
        "    data_X = []\n",
        "    data_y = []\n",
        "\n",
        "    for i in range(iters):\n",
        "        player1 = get_choice()\n",
        "\n",
        "        predict = model.predict_proba([str_to_list(player1)])[0]\n",
        "\n",
        "        if predict[0] >= 0.95:\n",
        "            player2 = options[0]\n",
        "        elif predict[1] >= 0.95:\n",
        "            player2 = options[1]\n",
        "        elif predict[2] >= 0.95:\n",
        "            player2 = options[2]\n",
        "        else:\n",
        "            player2 = get_choice()\n",
        "\n",
        "        if debug==True:\n",
        "            print(\"Player1: %s Player2 (modelo): %s --> %s\" % (player1, predict, player2))\n",
        "\n",
        "        winner = search_winner(player1, player2)\n",
        "        if debug==True:\n",
        "            print(\"Comprobamos: p1 VS p2: %s\" % winner)\n",
        "\n",
        "        if winner==2:\n",
        "            data_X.append(str_to_list(player1))\n",
        "            data_y.append(str_to_list(player2))\n",
        "\n",
        "            score[\"win\"]+=1\n",
        "        else:\n",
        "            score[\"loose\"]+=1\n",
        "\n",
        "    return score, data_X, data_y"
      ],
      "metadata": {
        "id": "FoKU8zl_MWj1"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "score, data_X, data_y = play_and_learn(1, debug=True)\n",
        "print(data_X)\n",
        "print(data_y)\n",
        "print(\"Score: %s %s %%\" % (score, (score[\"win\"]*100/(score[\"win\"]+score[\"loose\"]))))\n",
        "if len(data_X):\n",
        "    model = model.partial_fit(data_X, data_y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6xIMlSWxMYv2",
        "outputId": "e6e0b9d2-7650-4811-e0e4-d991ef1ecbaf"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Player1: piedra Player2 (modelo): [0.04048058 0.02555706 0.98065451] --> papel\n",
            "Comprobamos: p1 VS p2: 2\n",
            "[[1, 0, 0]]\n",
            "[[0, 0, 1]]\n",
            "Score: {'win': 1, 'loose': 0} 100.0 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "i = 0\n",
        "historic_pct = []\n",
        "while True:\n",
        "    i+=1\n",
        "    score, data_X, data_y = play_and_learn(1000, debug=False)\n",
        "    pct = (score[\"win\"]*100/(score[\"win\"]+score[\"loose\"]))\n",
        "    historic_pct.append(pct)\n",
        "    print(\"Iter: %s - score: %s %s %%\" % (i, score, pct))\n",
        "\n",
        "    if len(data_X):\n",
        "        model = model.partial_fit(data_X, data_y)\n",
        "\n",
        "    if sum(historic_pct[-9:])==900:\n",
        "        break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R_ec02p_Ma88",
        "outputId": "4e10c419-6bed-4ae6-9697-aca5bc626352"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iter: 1 - score: {'win': 560, 'loose': 440} 56.0 %\n",
            "Iter: 2 - score: {'win': 565, 'loose': 435} 56.5 %\n",
            "Iter: 3 - score: {'win': 554, 'loose': 446} 55.4 %\n",
            "Iter: 4 - score: {'win': 559, 'loose': 441} 55.9 %\n",
            "Iter: 5 - score: {'win': 539, 'loose': 461} 53.9 %\n",
            "Iter: 6 - score: {'win': 567, 'loose': 433} 56.7 %\n",
            "Iter: 7 - score: {'win': 547, 'loose': 453} 54.7 %\n",
            "Iter: 8 - score: {'win': 554, 'loose': 446} 55.4 %\n",
            "Iter: 9 - score: {'win': 555, 'loose': 445} 55.5 %\n",
            "Iter: 10 - score: {'win': 542, 'loose': 458} 54.2 %\n",
            "Iter: 11 - score: {'win': 536, 'loose': 464} 53.6 %\n",
            "Iter: 12 - score: {'win': 551, 'loose': 449} 55.1 %\n",
            "Iter: 13 - score: {'win': 570, 'loose': 430} 57.0 %\n",
            "Iter: 14 - score: {'win': 543, 'loose': 457} 54.3 %\n",
            "Iter: 15 - score: {'win': 345, 'loose': 655} 34.5 %\n",
            "Iter: 16 - score: {'win': 335, 'loose': 665} 33.5 %\n",
            "Iter: 17 - score: {'win': 320, 'loose': 680} 32.0 %\n",
            "Iter: 18 - score: {'win': 331, 'loose': 669} 33.1 %\n",
            "Iter: 19 - score: {'win': 338, 'loose': 662} 33.8 %\n",
            "Iter: 20 - score: {'win': 348, 'loose': 652} 34.8 %\n",
            "Iter: 21 - score: {'win': 340, 'loose': 660} 34.0 %\n",
            "Iter: 22 - score: {'win': 325, 'loose': 675} 32.5 %\n",
            "Iter: 23 - score: {'win': 326, 'loose': 674} 32.6 %\n",
            "Iter: 24 - score: {'win': 350, 'loose': 650} 35.0 %\n",
            "Iter: 25 - score: {'win': 329, 'loose': 671} 32.9 %\n",
            "Iter: 26 - score: {'win': 368, 'loose': 632} 36.8 %\n",
            "Iter: 27 - score: {'win': 338, 'loose': 662} 33.8 %\n",
            "Iter: 28 - score: {'win': 342, 'loose': 658} 34.2 %\n",
            "Iter: 29 - score: {'win': 345, 'loose': 655} 34.5 %\n",
            "Iter: 30 - score: {'win': 336, 'loose': 664} 33.6 %\n",
            "Iter: 31 - score: {'win': 321, 'loose': 679} 32.1 %\n",
            "Iter: 32 - score: {'win': 314, 'loose': 686} 31.4 %\n",
            "Iter: 33 - score: {'win': 317, 'loose': 683} 31.7 %\n",
            "Iter: 34 - score: {'win': 331, 'loose': 669} 33.1 %\n",
            "Iter: 35 - score: {'win': 358, 'loose': 642} 35.8 %\n",
            "Iter: 36 - score: {'win': 332, 'loose': 668} 33.2 %\n",
            "Iter: 37 - score: {'win': 317, 'loose': 683} 31.7 %\n",
            "Iter: 38 - score: {'win': 322, 'loose': 678} 32.2 %\n",
            "Iter: 39 - score: {'win': 350, 'loose': 650} 35.0 %\n",
            "Iter: 40 - score: {'win': 322, 'loose': 678} 32.2 %\n",
            "Iter: 41 - score: {'win': 341, 'loose': 659} 34.1 %\n",
            "Iter: 42 - score: {'win': 334, 'loose': 666} 33.4 %\n",
            "Iter: 43 - score: {'win': 342, 'loose': 658} 34.2 %\n",
            "Iter: 44 - score: {'win': 360, 'loose': 640} 36.0 %\n",
            "Iter: 45 - score: {'win': 362, 'loose': 638} 36.2 %\n",
            "Iter: 46 - score: {'win': 353, 'loose': 647} 35.3 %\n",
            "Iter: 47 - score: {'win': 339, 'loose': 661} 33.9 %\n",
            "Iter: 48 - score: {'win': 338, 'loose': 662} 33.8 %\n",
            "Iter: 49 - score: {'win': 316, 'loose': 684} 31.6 %\n",
            "Iter: 50 - score: {'win': 358, 'loose': 642} 35.8 %\n",
            "Iter: 51 - score: {'win': 319, 'loose': 681} 31.9 %\n",
            "Iter: 52 - score: {'win': 334, 'loose': 666} 33.4 %\n",
            "Iter: 53 - score: {'win': 357, 'loose': 643} 35.7 %\n",
            "Iter: 54 - score: {'win': 364, 'loose': 636} 36.4 %\n",
            "Iter: 55 - score: {'win': 344, 'loose': 656} 34.4 %\n",
            "Iter: 56 - score: {'win': 330, 'loose': 670} 33.0 %\n",
            "Iter: 57 - score: {'win': 334, 'loose': 666} 33.4 %\n",
            "Iter: 58 - score: {'win': 338, 'loose': 662} 33.8 %\n",
            "Iter: 59 - score: {'win': 326, 'loose': 674} 32.6 %\n",
            "Iter: 60 - score: {'win': 329, 'loose': 671} 32.9 %\n",
            "Iter: 61 - score: {'win': 355, 'loose': 645} 35.5 %\n",
            "Iter: 62 - score: {'win': 335, 'loose': 665} 33.5 %\n",
            "Iter: 63 - score: {'win': 319, 'loose': 681} 31.9 %\n",
            "Iter: 64 - score: {'win': 323, 'loose': 677} 32.3 %\n",
            "Iter: 65 - score: {'win': 316, 'loose': 684} 31.6 %\n",
            "Iter: 66 - score: {'win': 327, 'loose': 673} 32.7 %\n",
            "Iter: 67 - score: {'win': 338, 'loose': 662} 33.8 %\n",
            "Iter: 68 - score: {'win': 316, 'loose': 684} 31.6 %\n",
            "Iter: 69 - score: {'win': 330, 'loose': 670} 33.0 %\n",
            "Iter: 70 - score: {'win': 360, 'loose': 640} 36.0 %\n",
            "Iter: 71 - score: {'win': 336, 'loose': 664} 33.6 %\n",
            "Iter: 72 - score: {'win': 334, 'loose': 666} 33.4 %\n",
            "Iter: 73 - score: {'win': 340, 'loose': 660} 34.0 %\n",
            "Iter: 74 - score: {'win': 333, 'loose': 667} 33.3 %\n",
            "Iter: 75 - score: {'win': 342, 'loose': 658} 34.2 %\n",
            "Iter: 76 - score: {'win': 344, 'loose': 656} 34.4 %\n",
            "Iter: 77 - score: {'win': 302, 'loose': 698} 30.2 %\n",
            "Iter: 78 - score: {'win': 345, 'loose': 655} 34.5 %\n",
            "Iter: 79 - score: {'win': 351, 'loose': 649} 35.1 %\n",
            "Iter: 80 - score: {'win': 326, 'loose': 674} 32.6 %\n",
            "Iter: 81 - score: {'win': 348, 'loose': 652} 34.8 %\n",
            "Iter: 82 - score: {'win': 330, 'loose': 670} 33.0 %\n",
            "Iter: 83 - score: {'win': 377, 'loose': 623} 37.7 %\n",
            "Iter: 84 - score: {'win': 350, 'loose': 650} 35.0 %\n",
            "Iter: 85 - score: {'win': 321, 'loose': 679} 32.1 %\n",
            "Iter: 86 - score: {'win': 325, 'loose': 675} 32.5 %\n",
            "Iter: 87 - score: {'win': 324, 'loose': 676} 32.4 %\n",
            "Iter: 88 - score: {'win': 321, 'loose': 679} 32.1 %\n",
            "Iter: 89 - score: {'win': 355, 'loose': 645} 35.5 %\n",
            "Iter: 90 - score: {'win': 350, 'loose': 650} 35.0 %\n",
            "Iter: 91 - score: {'win': 303, 'loose': 697} 30.3 %\n",
            "Iter: 92 - score: {'win': 343, 'loose': 657} 34.3 %\n",
            "Iter: 93 - score: {'win': 338, 'loose': 662} 33.8 %\n",
            "Iter: 94 - score: {'win': 340, 'loose': 660} 34.0 %\n",
            "Iter: 95 - score: {'win': 562, 'loose': 438} 56.2 %\n",
            "Iter: 96 - score: {'win': 574, 'loose': 426} 57.4 %\n",
            "Iter: 97 - score: {'win': 533, 'loose': 467} 53.3 %\n",
            "Iter: 98 - score: {'win': 531, 'loose': 469} 53.1 %\n",
            "Iter: 99 - score: {'win': 541, 'loose': 459} 54.1 %\n",
            "Iter: 100 - score: {'win': 558, 'loose': 442} 55.8 %\n",
            "Iter: 101 - score: {'win': 556, 'loose': 444} 55.6 %\n",
            "Iter: 102 - score: {'win': 562, 'loose': 438} 56.2 %\n",
            "Iter: 103 - score: {'win': 536, 'loose': 464} 53.6 %\n",
            "Iter: 104 - score: {'win': 569, 'loose': 431} 56.9 %\n",
            "Iter: 105 - score: {'win': 562, 'loose': 438} 56.2 %\n",
            "Iter: 106 - score: {'win': 545, 'loose': 455} 54.5 %\n",
            "Iter: 107 - score: {'win': 561, 'loose': 439} 56.1 %\n",
            "Iter: 108 - score: {'win': 517, 'loose': 483} 51.7 %\n",
            "Iter: 109 - score: {'win': 568, 'loose': 432} 56.8 %\n",
            "Iter: 110 - score: {'win': 555, 'loose': 445} 55.5 %\n",
            "Iter: 111 - score: {'win': 531, 'loose': 469} 53.1 %\n",
            "Iter: 112 - score: {'win': 554, 'loose': 446} 55.4 %\n",
            "Iter: 113 - score: {'win': 537, 'loose': 463} 53.7 %\n",
            "Iter: 114 - score: {'win': 548, 'loose': 452} 54.8 %\n",
            "Iter: 115 - score: {'win': 545, 'loose': 455} 54.5 %\n",
            "Iter: 116 - score: {'win': 577, 'loose': 423} 57.7 %\n",
            "Iter: 117 - score: {'win': 553, 'loose': 447} 55.3 %\n",
            "Iter: 118 - score: {'win': 542, 'loose': 458} 54.2 %\n",
            "Iter: 119 - score: {'win': 570, 'loose': 430} 57.0 %\n",
            "Iter: 120 - score: {'win': 557, 'loose': 443} 55.7 %\n",
            "Iter: 121 - score: {'win': 551, 'loose': 449} 55.1 %\n",
            "Iter: 122 - score: {'win': 559, 'loose': 441} 55.9 %\n",
            "Iter: 123 - score: {'win': 573, 'loose': 427} 57.3 %\n",
            "Iter: 124 - score: {'win': 535, 'loose': 465} 53.5 %\n",
            "Iter: 125 - score: {'win': 585, 'loose': 415} 58.5 %\n",
            "Iter: 126 - score: {'win': 572, 'loose': 428} 57.2 %\n",
            "Iter: 127 - score: {'win': 556, 'loose': 444} 55.6 %\n",
            "Iter: 128 - score: {'win': 599, 'loose': 401} 59.9 %\n",
            "Iter: 129 - score: {'win': 556, 'loose': 444} 55.6 %\n",
            "Iter: 130 - score: {'win': 567, 'loose': 433} 56.7 %\n",
            "Iter: 131 - score: {'win': 549, 'loose': 451} 54.9 %\n",
            "Iter: 132 - score: {'win': 566, 'loose': 434} 56.6 %\n",
            "Iter: 133 - score: {'win': 553, 'loose': 447} 55.3 %\n",
            "Iter: 134 - score: {'win': 596, 'loose': 404} 59.6 %\n",
            "Iter: 135 - score: {'win': 576, 'loose': 424} 57.6 %\n",
            "Iter: 136 - score: {'win': 536, 'loose': 464} 53.6 %\n",
            "Iter: 137 - score: {'win': 547, 'loose': 453} 54.7 %\n",
            "Iter: 138 - score: {'win': 554, 'loose': 446} 55.4 %\n",
            "Iter: 139 - score: {'win': 560, 'loose': 440} 56.0 %\n",
            "Iter: 140 - score: {'win': 575, 'loose': 425} 57.5 %\n",
            "Iter: 141 - score: {'win': 542, 'loose': 458} 54.2 %\n",
            "Iter: 142 - score: {'win': 528, 'loose': 472} 52.8 %\n",
            "Iter: 143 - score: {'win': 546, 'loose': 454} 54.6 %\n",
            "Iter: 144 - score: {'win': 585, 'loose': 415} 58.5 %\n",
            "Iter: 145 - score: {'win': 564, 'loose': 436} 56.4 %\n",
            "Iter: 146 - score: {'win': 569, 'loose': 431} 56.9 %\n",
            "Iter: 147 - score: {'win': 541, 'loose': 459} 54.1 %\n",
            "Iter: 148 - score: {'win': 557, 'loose': 443} 55.7 %\n",
            "Iter: 149 - score: {'win': 568, 'loose': 432} 56.8 %\n",
            "Iter: 150 - score: {'win': 583, 'loose': 417} 58.3 %\n",
            "Iter: 151 - score: {'win': 791, 'loose': 209} 79.1 %\n",
            "Iter: 152 - score: {'win': 793, 'loose': 207} 79.3 %\n",
            "Iter: 153 - score: {'win': 772, 'loose': 228} 77.2 %\n",
            "Iter: 154 - score: {'win': 748, 'loose': 252} 74.8 %\n",
            "Iter: 155 - score: {'win': 769, 'loose': 231} 76.9 %\n",
            "Iter: 156 - score: {'win': 799, 'loose': 201} 79.9 %\n",
            "Iter: 157 - score: {'win': 803, 'loose': 197} 80.3 %\n",
            "Iter: 158 - score: {'win': 783, 'loose': 217} 78.3 %\n",
            "Iter: 159 - score: {'win': 785, 'loose': 215} 78.5 %\n",
            "Iter: 160 - score: {'win': 765, 'loose': 235} 76.5 %\n",
            "Iter: 161 - score: {'win': 792, 'loose': 208} 79.2 %\n",
            "Iter: 162 - score: {'win': 766, 'loose': 234} 76.6 %\n",
            "Iter: 163 - score: {'win': 772, 'loose': 228} 77.2 %\n",
            "Iter: 164 - score: {'win': 787, 'loose': 213} 78.7 %\n",
            "Iter: 165 - score: {'win': 778, 'loose': 222} 77.8 %\n",
            "Iter: 166 - score: {'win': 781, 'loose': 219} 78.1 %\n",
            "Iter: 167 - score: {'win': 792, 'loose': 208} 79.2 %\n",
            "Iter: 168 - score: {'win': 767, 'loose': 233} 76.7 %\n",
            "Iter: 169 - score: {'win': 789, 'loose': 211} 78.9 %\n",
            "Iter: 170 - score: {'win': 794, 'loose': 206} 79.4 %\n",
            "Iter: 171 - score: {'win': 786, 'loose': 214} 78.6 %\n",
            "Iter: 172 - score: {'win': 1000, 'loose': 0} 100.0 %\n",
            "Iter: 173 - score: {'win': 1000, 'loose': 0} 100.0 %\n",
            "Iter: 174 - score: {'win': 1000, 'loose': 0} 100.0 %\n",
            "Iter: 175 - score: {'win': 1000, 'loose': 0} 100.0 %\n",
            "Iter: 176 - score: {'win': 1000, 'loose': 0} 100.0 %\n",
            "Iter: 177 - score: {'win': 1000, 'loose': 0} 100.0 %\n",
            "Iter: 178 - score: {'win': 1000, 'loose': 0} 100.0 %\n",
            "Iter: 179 - score: {'win': 1000, 'loose': 0} 100.0 %\n",
            "Iter: 180 - score: {'win': 1000, 'loose': 0} 100.0 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from bokeh.plotting import figure, show\n",
        "from bokeh.io import push_notebook, show, output_notebook\n",
        "output_notebook()"
      ],
      "metadata": {
        "id": "5bq-8kA3MjqB"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x = range(len(historic_pct))\n",
        "y = historic_pct\n",
        "\n",
        "p = figure(\n",
        "    title=\"Porcetaje de aprendizaje en cada iteración\",\n",
        "    x_axis_label=\"Iter\", y_axis_label=\"%\", width=900)\n",
        "\n",
        "p.line(x, y, legend=None, line_width=1)\n",
        "show(p)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "f5g1nW9BMyu1",
        "outputId": "fe74ae7b-3ef1-4944-9c9d-00607a640f0d"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "'legend'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-273bf0dbee0f>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m     x_axis_label=\"Iter\", y_axis_label=\"%\", width=900)\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlegend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mline_width\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/bokeh/plotting/_decorators.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     85\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoordinates\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"coordinates\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoordinates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 87\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mcreate_renderer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mglyphclass\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     88\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m         \u001b[0mwrapped\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__signature__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSignature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msigparams\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/bokeh/plotting/_renderer.py\u001b[0m in \u001b[0;36mcreate_renderer\u001b[0;34m(glyphclass, plot, **kwargs)\u001b[0m\n\u001b[1;32m    131\u001b[0m         \u001b[0;31m# if it creates a new `LegendItem`, the referenced\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m         \u001b[0;31m# renderer must already be present.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m         \u001b[0mupdate_legend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlegend_kwarg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglyph_renderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mglyph_renderer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/bokeh/plotting/_legends.py\u001b[0m in \u001b[0;36mupdate_legend\u001b[0;34m(plot, legend_kwarg, glyph_renderer)\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0mkwarg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlegend_kwarg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m     \u001b[0m_LEGEND_KWARG_HANDLERS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkwarg\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlegend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mglyph_renderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;31m#-----------------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'legend'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.predict_proba([str_to_list(\"piedra\")])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RnywlfYuNAru",
        "outputId": "c6ff57a7-dca0-4435-85b0-c528bd2a1f35"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.00374934, 0.0042227 , 0.99066191]])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    }
  ]
}